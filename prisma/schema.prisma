// FSD担保交易平台数据库设计

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  phone         String?
  avatar        String?
  role          Role      @default(BUYER)
  verified      Boolean   @default(false)  // 是否实名认证
  balance       Float     @default(0)      // 账户余额
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关联
  sellOrders    Order[]   @relation("SellerOrders")
  buyOrders     Order[]   @relation("BuyerOrders")
  payments      Payment[]
  disputes      Dispute[]
  givenReviews  Review[]  @relation("Reviewer")
  receivedReviews Review[] @relation("Reviewee")
  withdrawals   Withdrawal[]
  auditLogs     AuditLog[]  // 审计日志
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

// 订单表
model Order {
  id              String      @id @default(cuid())
  orderNo         String      @unique  // 订单编号

  // 关联用户
  sellerId        String
  seller          User        @relation("SellerOrders", fields: [sellerId], references: [id])
  buyerId         String?
  buyer           User?       @relation("BuyerOrders", fields: [buyerId], references: [id])

  // 订单状态
  status          OrderStatus @default(PUBLISHED)

  // 车辆和FSD信息
  vehicleBrand    String      // 车辆品牌
  vehicleModel    String      // 车辆型号
  vehicleYear     Int         // 车辆年份
  vin             String?     // 车架号(部分隐藏)
  fsdVersion      String      // FSD版本

  // 价格信息
  price           Float       // 售价
  escrowAmount    Float?      // 实际担保金额
  platformFee     Float?      // 平台手续费

  // 转移凭证
  transferProof   String?     // 转移凭证图片/文件URL
  transferNote    String?     // 转移说明

  // 退款申请
  refundRequested Boolean     @default(false)  // 是否有退款申请
  refundReason    String?                      // 买家退款申请原因
  refundRequestedAt DateTime?                  // 退款申请时间
  refundStatus    RefundStatus?                // 退款申请状态
  refundRejectedReason String?                 // 卖家拒绝退款理由
  refundRejectedAt DateTime?                   // 拒绝退款时间

  // 时间戳
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  paidAt          DateTime?   // 支付时间
  transferredAt   DateTime?   // 转移完成时间
  completedAt     DateTime?   // 订单完成时间
  cancelledAt     DateTime?   // 取消时间

  // ✅ 安全修复: 乐观锁版本控制,防止并发问题
  version         Int         @default(0)

  // 关联
  payments        Payment[]
  disputes        Dispute[]
  reviews         Review[]

  // ✅ 性能优化: 添加数据库索引
  @@index([sellerId, status])  // 卖家查看自己的订单
  @@index([buyerId, status])   // 买家查看自己的订单
  @@index([status, createdAt]) // 按状态筛选并按时间排序
  @@index([createdAt])         // 按时间排序
  @@index([status])            // 管理员按状态筛选
}

enum OrderStatus {
  PUBLISHED      // 已发布
  PAID           // 已支付(买家已付款到担保)
  TRANSFERRING   // 转移中(卖家已发起转移)
  CONFIRMING     // 待确认(买家确认中)
  COMPLETED      // 已完成
  CANCELLED      // 已取消
  DISPUTE        // 申诉中
}

// 支付记录表
model Payment {
  id              String        @id @default(cuid())

  // 关联
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  userId          String
  user            User          @relation(fields: [userId], references: [id])

  // 支付信息
  amount          Float
  type            PaymentType
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?       // 支付方式(alipay/wechat/bank)
  transactionId   String?       // 第三方交易ID

  // 备注
  note            String?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // ✅ 性能优化: 添加数据库索引
  @@index([orderId])           // JOIN查询优化
  @@index([userId, type])      // 用户查看自己的支付记录
  @@index([status, createdAt]) // 按状态筛选并按时间排序
  @@index([type])              // 按支付类型筛选
}

enum PaymentType {
  ESCROW    // 托管支付(买家付款到平台)
  RELEASE   // 释放款项(平台付款给卖家)
  REFUND    // 退款(平台退款给买家)
  WITHDRAW  // 提现
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// 申诉/纠纷表
model Dispute {
  id              String        @id @default(cuid())

  // 关联
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  initiatorId     String        // 发起人
  initiator       User          @relation(fields: [initiatorId], references: [id])

  // 申诉信息
  reason          String        // 申诉原因
  description     String        // 详细描述
  evidence        String?       // 证据(图片URLs，JSON格式)
  status          DisputeStatus @default(PENDING)

  // 处理结果
  resolution      String?       // 处理结果
  resolvedBy      String?       // 处理人

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  resolvedAt      DateTime?

  // ✅ 性能优化: 添加数据库索引
  @@index([orderId])           // 查询订单的所有申诉
  @@index([status, createdAt]) // 管理员按状态筛选申诉
  @@index([initiatorId])       // 查询用户发起的申诉
}

enum DisputeStatus {
  PENDING    // 待处理
  PROCESSING // 处理中
  RESOLVED   // 已解决
  CLOSED     // 已关闭
}

// 退款状态
enum RefundStatus {
  PENDING    // 待处理
  APPROVED   // 已同意
  REJECTED   // 已拒绝
}

// 评价表
model Review {
  id              String    @id @default(cuid())

  // 关联
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id])
  reviewerId      String    // 评价人
  reviewer        User      @relation("Reviewer", fields: [reviewerId], references: [id])
  revieweeId      String    // 被评价人
  reviewee        User      @relation("Reviewee", fields: [revieweeId], references: [id])

  // 评价内容
  rating          Int       // 评分 1-5
  comment         String?   // 评价内容

  createdAt       DateTime  @default(now())

  @@unique([orderId, reviewerId])
}

// 提现申请表
model Withdrawal {
  id              String            @id @default(cuid())

  // 关联
  userId          String
  user            User              @relation(fields: [userId], references: [id])

  // 提现信息
  amount          Float             // 提现金额
  fee             Float             @default(0) // 提现手续费
  actualAmount    Float             // 实际到账金额

  // 收款信息
  bankName        String?           // 银行名称
  bankAccount     String?           // 银行账号
  accountName     String?           // 账户名称
  alipayAccount   String?           // 支付宝账号
  wechatAccount   String?           // 微信账号
  withdrawMethod  String            // 提现方式(bank/alipay/wechat)

  // 状态
  status          WithdrawalStatus  @default(PENDING)

  // 审核信息
  reviewedBy      String?           // 审核人
  reviewNote      String?           // 审核备注
  rejectReason    String?           // 拒绝原因
  reviewedAt      DateTime?         // 审核时间

  // 支付信息
  transactionId   String?           // 交易ID
  completedAt     DateTime?         // 完成时间

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // ✅ 性能优化: 添加数据库索引
  @@index([userId, status])    // 用户查看自己的提现记录
  @@index([status, createdAt]) // 管理员按状态筛选提现申请
  @@index([createdAt])         // 按时间排序
}

enum WithdrawalStatus {
  PENDING       // 待审核
  APPROVED      // 已批准
  REJECTED      // 已拒绝
  PROCESSING    // 处理中
  COMPLETED     // 已完成
  FAILED        // 失败
}

// ✅ 安全增强: 管理员审计日志表
model AuditLog {
  id          String    @id @default(cuid())

  // 操作人
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  // 操作信息
  action      String    // 操作类型: UPDATE_BALANCE, APPROVE_WITHDRAWAL, REJECT_WITHDRAWAL等
  target      String?   // 目标对象ID(用户ID/订单ID/提现ID等)
  targetType  String?   // 目标类型: User, Order, Withdrawal等

  // 操作详情
  oldValue    Json?     // 操作前的值
  newValue    Json?     // 操作后的值
  description String?   // 操作描述

  // 请求信息
  ip          String?   // 操作IP
  userAgent   String?   // 用户代理

  createdAt   DateTime  @default(now())

  // ✅ 性能优化: 添加索引
  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([target])
  @@index([createdAt])
}
